1、适配器模式有点“亡羊补牢”的感觉，主要是因为软件总有维护的一天，维护就有可能
会因为不同的开发人员、不同的产品、不同开发周期（不同的架构人员）定义的不同的接口、
不同的厂家而造成功能类似而接口不同的情况。此时就可以使用适配器。
2、公司内部，类和方法的命名应该要有规范，最好前期就设计好，然后当发现接口不一样时，
首先考虑的是重构统一的接口。当开发周期间隔很长，原开发人员不在或者接口不容易修改时，
再考虑使用适配器模式。
3、如果公司设计一系统时考虑使用第三方开发组件，而这个组件的接口与我们自定的系统接口
是不同的，我们没有必要为迎合它而改动自己的接口，此时尽管处于开发的设计阶段，也可以
考虑用适配器来解决接口不同的问题。
4、本案例的适配器主要做  翻译的工具。
5、在.NET中，有一个类库已经实现的、非常重要的适配器:DataAdapter
  DataAdapter用作DataSet和数据源（mysql、oracle）之间的适配器以便索引和保存数据。
  DataAdapter通过映射Fill（这更改了DataSet中的数据以便与数据源中的数据匹配）和
  Update（这更改了数据源中的数据以便与DataSet中的数据匹配）来提供这一适配器。
  
      这数据源可能是来自SQL Server、Oracle、Mysql、Acess、DB2.这些数据在组织上可能
      有不同之处，但是我们希望得到统一的DataSet（实质是XML数据），此时就用DataAdapter。
      我们无需关注不同的数据库的细节，就可以灵活的使用数据。